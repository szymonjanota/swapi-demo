{"version":3,"sources":["components/Button.tsx","components/SearchForm.tsx","components/Title.tsx","components/Layout.tsx","types/ApiResponse.ts","types/Character.ts","types/ApiRoot.ts","utils/castDataToSchema.ts","utils/convertToHttpsUrl.ts","hooks/useApiRoot.ts","hooks/useCharacters.ts","hooks/useInfiniteResource.ts","types/Planet.ts","utils/resources.ts","hooks/useResource.ts","components/DescriptionList/DescriptionList.tsx","components/DescriptionList/FieldTitle.tsx","components/DescriptionList/FieldValue.tsx","types/Film.ts","views/FilmView.tsx","hooks/useFilm.ts","views/CharacterView.tsx","hooks/usePlanet.ts","components/CharactersList.tsx","views/Characters.tsx","Providers.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","styled","MuiButton","StyledPaper","Paper","StyledInputBase","InputBase","StyledSearchForm","className","value","onSubmit","onChange","component","e","preventDefault","placeholder","target","type","Title","Typography","Layout","children","Container","maxWidth","getApiResponseForType","t","count","next","previous","results","CharactersResponse","name","homeworld","url","films","ApiRoot","people","planets","castDataToType","data","validation","decode","console","warn","left","invariant","_tag","right","convertToHttpsUrl","httpUrl","URL","protocol","toString","apiRootQueryConfig","queryKey","queryFn","a","fetch","process","response","mapValues","json","config","staleTime","Infinity","cacheTime","useApiRoot","useQuery","useCharacters","options","queryParams","apiRoot","useInfiniteQuery","key","params","search","searchParams","set","enabled","Boolean","getFetchMore","lastPage","Planet","population","getResourceUrl","baseUrl","urlOrId","split","filter","part","length","fetchResource","resourceUrl","useResource","resource","DescriptionList","dl","FieldTitle","dt","FieldValue","dd","Film","title","release_date","opening_crawl","FilmView","useFilm","film","useMemo","releaseDate","format","Date","openingCrawl","ellipsize","Root","div","CharacterView","homeworldUrl","useState","showMovies","setShowMovies","usePlanet","onClick","map","CharacterContainer","CharactersList","charactersQuery","status","canFetchMore","fetchMore","allCharacters","flatMap","page","log","Box","person","SearchFormContainer","StyledSubtitle","Characters","text","setText","setSearch","variant","GlobalStyle","createGlobalStyle","Providers","queryCache","QueryCache","useEffect","prefetchQuery","muiTheme","theme","createMuiTheme","typography","fontFamily","palette","primary","yellow","responsiveFontSizes","StylesProvider","injectFirst","CssBaseline","ThemeProvider","App","initialIsOpen","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.91010413.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Button as MuiButton } from \"@material-ui/core\";\n\n\nexport const Button = styled(MuiButton)`\n  border-radius: 0;\n  background-color: yellow;\n  box-shadow: none;\n  padding: 7px 14px;\n  &:hover {\n    background-color: #cccc00;\n  }\n`","import React from 'react'\nimport { InputBase, Paper } from '@material-ui/core'\nimport styled from 'styled-components'\nimport { Button } from './Button'\n\nconst StyledPaper = styled(Paper)`\n  border-radius: 0;\n  display: flex;\n  background-color: black;\n  border: 2px solid yellow;\n`\n\nconst StyledInputBase = styled(InputBase)`\n  flex: 1;\n  color: yellow;\n  padding: 0 10px;\n`\n\nexport type SearchFormProps = {\n  className?: string\n  value: string\n  onChange: (value: string) => void\n  onSubmit: (value: string) => void\n}\n\nexport const SearchForm: React.FC<SearchFormProps> = ({\n  className,\n  value,\n  onSubmit,\n  onChange,\n}) => (\n  <StyledPaper\n    component=\"form\"\n    className={className}\n    onSubmit={(e) => {\n      e.preventDefault()\n      onSubmit(value)\n    }}\n  >\n    <StyledInputBase\n      placeholder=\"Search in the galaxy...\"\n      value={value}\n      onChange={(e) => onChange(e.target.value)}\n    />\n    <Button type=\"submit\">Search</Button>\n  </StyledPaper>\n)\n\nexport const StyledSearchForm = styled(SearchForm)``\n","import styled from 'styled-components'\nimport { Typography } from '@material-ui/core'\n\nexport const Title = styled(Typography)`\n  font-family: 'Changa One', cursive;\n  text-transform: uppercase;\n  text-align: center;\n`\n","import React from 'react'\nimport { Container } from '@material-ui/core'\n\nexport const Layout: React.FC = ({ children }) => {\n  return <Container maxWidth=\"md\">{children as any}</Container>\n}\n","import * as t from 'io-ts'\n\nexport const getApiResponseForType = <A>(type: t.Type<A>) =>\n  t.type({\n    count: t.number,\n    next: t.union([t.string, t.null]),\n    previous: t.union([t.string, t.null]),\n    results: t.array(type),\n  })\n","import * as t from 'io-ts'\nimport { getApiResponseForType } from './ApiResponse'\n\nexport const Character = t.type({\n  name: t.string,\n  homeworld: t.string,\n  url: t.string,\n  films: t.array(t.string),\n})\nexport type Character = t.TypeOf<typeof Character>\n\nexport const CharactersResponse = getApiResponseForType(Character)\nexport type CharactersResponse = t.TypeOf<typeof CharactersResponse>\n","import * as t from 'io-ts'\n\nexport const ApiRoot = t.type({\n  people: t.string,\n  planets: t.string,\n  films: t.string,\n})\nexport type ApiRoot = t.TypeOf<typeof ApiRoot>\n","import * as t from 'io-ts'\nimport invariant from 'tiny-invariant'\n\nexport const castDataToType = <A, O = A, I = unknown>(\n  data: I,\n  type: t.Type<A, O, I>\n): A => {\n  const validation = type.decode(data)\n  if ('left' in validation) {\n    console.warn(data, validation.left)\n  }\n  invariant(validation._tag === 'Right', `Data could not be parsed to schema`)\n\n  return validation.right\n}\n","export const convertToHttpsUrl = (httpUrl: string) => {\n  const url = new URL(httpUrl)\n\n  url.protocol = 'https'\n\n  return url.toString()\n}\n","import { useQuery } from 'react-query'\nimport mapValues from 'lodash/mapValues'\n\nimport { ApiRoot } from 'types/ApiRoot'\nimport { castDataToType } from 'utils/castDataToSchema'\nimport { convertToHttpsUrl } from 'utils/convertToHttpsUrl'\n\n\nexport const apiRootQueryConfig = {\n  queryKey: 'api-root',\n  queryFn: async () => {\n    const response = await fetch(\n      typeof process.env.REACT_APP_API_BASE_URL === 'string'\n        ? process.env.REACT_APP_API_BASE_URL\n        : 'https://swapi.dev/api/'\n    )\n    return mapValues(\n      castDataToType(await response.json(), ApiRoot),\n      convertToHttpsUrl,\n    )\n  },\n  config: {\n    staleTime: Infinity,\n    cacheTime: Infinity,\n  },\n}\n\nexport const useApiRoot = () => {\n  return useQuery<ApiRoot>(apiRootQueryConfig)\n}\n","import { CharactersResponse } from 'types/Character'\n\nimport { useApiRoot } from './useApiRoot'\nimport { useInfiniteResource } from './useInfiniteResource'\n\n\nexport const useCharacters = (options?: { search?: string; page?: number }) => {\n  const { data: apiRoot } = useApiRoot()\n  return useInfiniteResource(CharactersResponse, apiRoot?.people, options)\n}\n","\nimport { useInfiniteQuery } from \"react-query\"\nimport { Type } from \"io-ts\"\nimport invariant from \"tiny-invariant\"\n\nimport { castDataToType } from \"utils/castDataToSchema\"\nimport { convertToHttpsUrl } from \"utils/convertToHttpsUrl\"\n\n\nexport const useInfiniteResource = <T extends { next: string | null, previous: string | null }>(\n    type: Type<T>,\n    url?: string,\n    queryParams?: {\n      page?: number\n      search?: string,\n    }\n  ) => {\n    const result = useInfiniteQuery(\n      [url, queryParams],\n      async (\n        key?: string,\n        params?: {\n          search?: string\n        },\n        next: string | null = null\n      ) => {\n        invariant(key, 'url is required')\n  \n        const url = new URL(next || key)\n  \n        if (params?.search) {\n          url.searchParams.set('search', params.search)\n        }\n  \n        const response = await fetch(\n          convertToHttpsUrl(url.toString())\n        )\n        const data = await response.json()\n  \n        return castDataToType(data, type)\n      },\n      {\n        enabled: Boolean(url),\n        getFetchMore: lastPage => lastPage.next\n      }\n    )\n    return result\n  }","import * as t from 'io-ts'\nimport { getApiResponseForType } from './ApiResponse'\n\nexport const Planet = t.type({\n  url: t.string,\n  name: t.string,\n  population: t.string,\n})\nexport type Planet = t.TypeOf<typeof Planet>\n\nexport const PlanetsResponse = getApiResponseForType(Planet)\nexport type PlanetsResponse = t.TypeOf<typeof PlanetsResponse>\n","export const getResourceId = (url: string) => {\n  const urlParts = url.split('/').filter((part) => part !== '')\n  return urlParts[urlParts.length - 1]\n}\n\nexport const getResourceUrl = (baseUrl: string, urlOrId: string) => {\n  const urlParts = urlOrId.split('/').filter((part) => part !== '')\n  if (urlParts.length === 1) {\n    return `${baseUrl}${urlOrId}`\n  }\n  return urlOrId\n}\n","import { useQuery } from 'react-query'\nimport { Type } from 'io-ts'\nimport { castDataToType } from 'utils/castDataToSchema'\nimport invariant from 'tiny-invariant'\nimport { getResourceUrl } from 'utils/resources'\nimport { convertToHttpsUrl } from 'utils/convertToHttpsUrl'\n\nconst fetchResource = async (\n  resourceUrl: string,\n  urlOrId: string\n): Promise<unknown> => {\n  const response = await fetch(\n    convertToHttpsUrl(getResourceUrl(resourceUrl, urlOrId))\n  )\n  return response.json()\n}\n\nexport const useResource = <T>(resource: {\n  type: Type<T>\n  baseUrl?: string\n  urlOrId?: string\n}) => {\n  const result = useQuery(\n    [resource.baseUrl, resource.urlOrId],\n    async (resourceUrl: unknown, urlOrId: unknown) => {\n      invariant(typeof resourceUrl === 'string', 'resourceUrl is required')\n      invariant(typeof urlOrId === 'string', 'urlOrId is required')\n\n      return castDataToType(\n        await fetchResource(resourceUrl, urlOrId),\n        resource.type\n      )\n    },\n    {\n      enabled: Boolean(resource.baseUrl && resource.urlOrId),\n    }\n  )\n  return result\n}\n","import styled from 'styled-components'\n\nexport const DescriptionList = styled.dl`\n  display: grid;\n  grid-template-columns: auto 1fr;\n  margin: 0;\n  padding: 0;\n  flex: 1;\n`\n","import styled from 'styled-components'\n\nexport const FieldTitle = styled.dt`\n  background-color: yellow;\n  border: 1px solid black;\n  color: black;\n  padding: 8px;\n`\n","import styled from \"styled-components\";\n\nexport const FieldValue = styled.dd`\n  border: 1px solid yellow;\n  color: yellow;\n  padding: 8px;\n  margin: 0;\n`\n","import * as t from 'io-ts'\nimport { getApiResponseForType } from './ApiResponse'\n\nexport const Film = t.type({\n  url: t.string,\n  title: t.string,\n  release_date: t.string,\n  opening_crawl: t.string,\n})\nexport type Film = t.TypeOf<typeof Film>\n\nexport const FilmsResponse = getApiResponseForType(Film)\nexport type FilmsResponse = t.TypeOf<typeof FilmsResponse>\n","import React, { useMemo } from 'react'\nimport { format } from 'date-fns'\nimport ellipsize from 'ellipsize'\n\nimport { useFilm } from 'hooks/useFilm'\n\nimport {\n  DescriptionList,\n  FieldTitle,\n  FieldValue,\n} from 'components/DescriptionList'\nimport { Typography } from '@material-ui/core'\n\nexport const FilmView: React.FC<{\n  url: string\n}> = ({ url }) => {\n  const { data } = useFilm(url)\n\n  const film = useMemo(\n    () =>\n      data\n        ? {\n            title: data.title,\n            releaseDate: format(new Date(data.release_date), 'MMM dd, yyyy'),\n            openingCrawl: ellipsize(data.opening_crawl, 130),\n          }\n        : null,\n    [data]\n  )\n\n  return (\n    film && (\n      <>\n        <DescriptionList>\n          <FieldTitle>\n            <Typography>Title</Typography>\n          </FieldTitle>\n          <FieldValue>\n            <Typography>{film.title}</Typography>\n          </FieldValue>\n          \n          <FieldTitle>\n            <Typography>Release Date</Typography>\n          </FieldTitle>\n          <FieldValue>\n            <Typography>{film.releaseDate}</Typography>\n          </FieldValue>\n\n          <FieldTitle>\n            <Typography>Opening Crawl</Typography>\n          </FieldTitle>\n          <FieldValue>\n            <Typography>{film.openingCrawl}</Typography>\n          </FieldValue>\n        </DescriptionList>\n      </>\n    )\n  )\n}\n","import { Film } from 'types/Film'\n\nimport { useApiRoot } from './useApiRoot'\nimport { useResource } from './useResource'\n\n\nexport const useFilm = (urlOrId: string) => {\n  const { data: apiRoot } = useApiRoot()\n  return useResource({\n    type: Film,\n    baseUrl: apiRoot?.films,\n    urlOrId,\n  })\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Typography } from '@material-ui/core'\n\nimport { usePlanet } from 'hooks/usePlanet'\nimport {\n  DescriptionList,\n  FieldTitle,\n  FieldValue,\n} from 'components/DescriptionList'\n\nimport { FilmView } from './FilmView'\n\nconst Root = styled.div`\n  cursor: pointer;\n`\n\nexport type CharacterViewProps = {\n  name: string\n  homeworldUrl: string\n  films: string[]\n}\n\nexport const CharacterView: React.FC<CharacterViewProps> = ({\n  name,\n  homeworldUrl,\n  films,\n}) => {\n  const [showMovies, setShowMovies] = useState(false)\n  const { data: homeworld } = usePlanet(homeworldUrl)\n\n  return (\n    <Root onClick={() => setShowMovies((previous) => !previous)}>\n      <DescriptionList>\n        <FieldTitle>\n          <Typography>Name</Typography>\n        </FieldTitle>\n        <FieldValue>\n          <Typography>{name}</Typography>\n        </FieldValue>\n\n        <FieldTitle>\n          <Typography>Homeworld</Typography>\n        </FieldTitle>\n        <FieldValue>\n          <Typography>{homeworld?.name}</Typography>\n        </FieldValue>\n\n        <FieldTitle>\n          <Typography>Homeworld Population</Typography>\n        </FieldTitle>\n        <FieldValue>\n          <Typography>{homeworld?.population}</Typography>\n        </FieldValue>\n\n        {showMovies && (\n          <>\n            <FieldValue>\n              <Typography>Movies</Typography>\n            </FieldValue>\n            <FieldValue>\n              {films.map((film) => (\n                <FilmView key={film} url={film} />\n              ))}\n            </FieldValue>\n          </>\n        )}\n      </DescriptionList>\n    </Root>\n  )\n}\n","import { Planet } from 'types/Planet'\n\nimport { useApiRoot } from './useApiRoot'\nimport { useResource } from './useResource'\n\n\nexport const usePlanet = (urlOrId: string) => {\n  const { data: apiRoot } = useApiRoot()\n  return useResource({\n    type: Planet,\n    baseUrl: apiRoot?.planets,\n    urlOrId,\n  })\n}\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Box } from '@material-ui/core'\n\nimport { useCharacters } from 'hooks/useCharacters'\nimport { CharacterView } from 'views/CharacterView'\n\nimport { Button } from './Button'\n\nexport const CharacterContainer = styled.div`\n  margin-bottom: 8px;\n\n  transition: 0.3s;\n  outline-offset: 0px;\n  outline-width: 1px;\n  outline-style: dashed;\n  outline-color: transparent;\n\n  :hover {\n    outline-offset: 4px;\n    outline-color: yellow;\n  }\n`\n\nexport const CharactersList: React.FC<{ search?: string }> = ({ search }) => {\n  const charactersQuery = useCharacters({\n    search,\n  })\n  const { status, data, canFetchMore, fetchMore } = charactersQuery\n\n  const allCharacters = useMemo(() => data?.flatMap((page) => page.results), [\n    data,\n  ])\n\n  if (status === 'loading') return <p>Loading...</p>\n  if (status === 'error') return <p>Error :(</p>\n\n  console.log(canFetchMore)\n\n  return (\n    <Box>\n      {allCharacters?.map((person) => {\n        return (\n          <CharacterContainer>\n            <CharacterView\n              key={person.url}\n              name={person.name}\n              homeworldUrl={person.homeworld}\n              films={person.films}\n            />\n          </CharacterContainer>\n        )\n      })}\n      {canFetchMore && <Button onClick={() => fetchMore()}>Next</Button>}\n    </Box>\n  )\n}\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\n\nimport { StyledSearchForm } from 'components/SearchForm'\nimport { Title } from 'components/Title'\nimport { Layout } from 'components/Layout'\nimport { CharactersList } from 'components/CharactersList'\nimport { useApiRoot } from 'hooks/useApiRoot'\n\nconst SearchFormContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 50px;\n\n  ${StyledSearchForm} {\n    flex: 0 1 400px;\n  }\n`\n\nconst StyledSubtitle = styled(Title)`\n  border-top: 1px solid yellow;\n  margin-bottom: 48px;\n`\n\n\n\nexport const Characters = () => {\n  console.log(useApiRoot())\n  const [text, setText] = useState('')\n  const [search, setSearch] = useState('')\n\n  return (\n    <Layout>\n      <Title variant=\"h1\">STAR WARS</Title>\n      <StyledSubtitle variant=\"h2\">Characters</StyledSubtitle>\n\n      <SearchFormContainer>\n        <StyledSearchForm\n          value={text}\n          onChange={setText}\n          onSubmit={setSearch}\n        />\n      </SearchFormContainer>\n\n      {search && <CharactersList search={search} />}\n    </Layout>\n  )\n}\n","import React, { useMemo, useEffect } from 'react'\nimport { QueryCache, ReactQueryCacheProvider } from 'react-query'\nimport { BrowserRouter } from 'react-router-dom'\nimport { createGlobalStyle } from 'styled-components'\nimport {\n  createMuiTheme,\n  CssBaseline,\n  responsiveFontSizes,\n  StylesProvider,\n  ThemeProvider,\n} from '@material-ui/core'\nimport yellow from '@material-ui/core/colors/yellow'\n\nimport { apiRootQueryConfig } from 'hooks/useApiRoot'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background-color: black;\n    color: yellow;\n  }\n`\n\nexport const Providers: React.FC = ({ children }) => {\n  const queryCache = useMemo(() => new QueryCache(), [])\n\n  useEffect(() => {\n    queryCache.prefetchQuery(apiRootQueryConfig)\n  }, [queryCache])\n\n  const muiTheme = useMemo(() => {\n    const theme = createMuiTheme({\n      typography: {\n        fontFamily: 'Montserrat, sans-serif',\n      },\n      palette: {\n        primary: yellow,\n      },\n    })\n    return responsiveFontSizes(theme)\n  }, [])\n\n  console.log(muiTheme)\n\n  return (\n    <StylesProvider injectFirst>\n      <CssBaseline />\n      <ThemeProvider theme={muiTheme}>\n        <ReactQueryCacheProvider queryCache={queryCache}>\n          <GlobalStyle />\n          <BrowserRouter>{children}</BrowserRouter>\n        </ReactQueryCacheProvider>\n      </ThemeProvider>\n    </StylesProvider>\n  )\n}\n","import React from 'react'\nimport { ReactQueryDevtools } from 'react-query-devtools'\n\nimport { Characters } from 'views/Characters'\nimport { Providers } from 'Providers'\n\nfunction App() {\n  return (\n    <Providers>\n      <Characters />\n      <ReactQueryDevtools initialIsOpen />\n    </Providers>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}